package sources

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/centrifugal/centrifuge-go"
	"github.com/wailsapp/wails/v2/pkg/runtime"
)

var api_donatepay_uri string = "https://donatepay.ru/api/v2"

// DonatePayCollector —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è DonatePay
type DonatePayCollector struct {
	ctx            context.Context
	accessToken    string
	userID         string
	reconnectDelay time.Duration
	client         *centrifuge.Client
	eventChan      chan<- DonationEvent
	stop           chan struct{}
}

func (dc *DonatePayCollector) setGUIState(state string) {
	runtime.EventsEmit(dc.ctx, "donatepayConnectionUpdated", state)
}

// NewDonatePayCollector —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è DonatePay
func NewDonatePayCollector(ctx context.Context, accessToken, userID string, ch chan<- DonationEvent) *DonatePayCollector {
	return &DonatePayCollector{
		ctx:            ctx,
		accessToken:    accessToken,
		userID:         userID,
		reconnectDelay: 5 * time.Second,
		eventChan:      ch,
		stop:           make(chan struct{}),
	}
}

// ConnetionEventHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è Centrifugo
type ConnetionEventHandler struct {
	dc *DonatePayCollector
}

// OnConnect –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
func (c ConnetionEventHandler) OnConnect(client *centrifuge.Client, event centrifuge.ConnectEvent) {
	c.dc.setGUIState(Connected)
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ DonatePay Centrifugo")
}

// OnError –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
func (c ConnetionEventHandler) OnError(client *centrifuge.Client, event centrifuge.ErrorEvent) {
	log.Printf("‚ùå –û—à–∏–±–∫–∞ Centrifugo: %v", event)
}

// OnDisconnect –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
func (c ConnetionEventHandler) OnDisconnect(client *centrifuge.Client, event centrifuge.DisconnectEvent) {
	c.dc.setGUIState(Disonnected)
	log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Centrifugo: %v", event)
}

// OnSubscribeSuccess –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
func (c ConnetionEventHandler) OnSubscribeSuccess(sub *centrifuge.Subscription, event centrifuge.SubscribeSuccessEvent) {
	log.Printf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª %s —É—Å–ø–µ—à–Ω–∞ (Recovered: %v, Resubscribed: %v)", sub.Channel(), event.Recovered, event.Resubscribed)
}

// OnSubscribeError –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (c ConnetionEventHandler) OnSubscribeError(sub *centrifuge.Subscription, event centrifuge.SubscribeErrorEvent) {
	c.dc.setGUIState(Disonnected)
	log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª %s: %s", sub.Channel(), event.Error)
}

// OnUnsubscribe –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ
func (c ConnetionEventHandler) OnUnsubscribe(sub *centrifuge.Subscription, event centrifuge.UnsubscribeEvent) {
	log.Printf("üîå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ %s", sub.Channel())
}

// PublishHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–∞—Ö
type PublishHandler struct {
	ctx context.Context
	ch  chan<- DonationEvent
}

// OnPublish –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
func (h PublishHandler) OnPublish(sub *centrifuge.Subscription, e centrifuge.PublishEvent) {
	// –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("üì© CENTRIFUGO JSON from channel %s: %s", sub.Channel(), string(e.Data))

	// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
	var msg struct {
		Type         string `json:"type"`
		Notification struct {
			Type   string `json:"type"`
			UserID int    `json:"user_id"`
			Vars   string `json:"vars"` // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ string
		} `json:"notification"`
	}
	if err := json.Unmarshal(e.Data, &msg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}
	if msg.Type != "event" || msg.Notification.Type != "donation" {
		log.Printf("‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å type=%s, notification.type=%s", msg.Type, msg.Notification.Type)

		return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ–Ω–∞—Ç–∞–º–∏
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ vars –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
	if msg.Notification.Vars == "" {
		log.Printf("‚ùå –ü–æ–ª–µ vars –ø—É—Å—Ç–æ–µ")
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ vars
	var vars struct {
		Name      string  `json:"name"`
		Comment   string  `json:"comment"`
		Sum       float64 `json:"sum"`
		Currency  string  `json:"currency"` // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
		Target    string  `json:"target"`
		VideoLink string  `json:"video_link"`
		VideoID   string  `json:"video_id"`
	}
	if err := json.Unmarshal([]byte(msg.Notification.Vars), &vars); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ vars: %v (vars: %s)", err, msg.Notification.Vars)
		return
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	donation := DonationEvent{
		SourceID: "donatepay",
		User:     vars.Name, //fmt.Sprintf("donatepay-%d", msg.Notification.UserID),
		Amount:   vars.Sum,
		//Currency:   vars.Currency, //–º–± –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø–æ—Ç–æ–º
		Message:   vars.Comment,
		Timestamp: time.Now(),
		Date:      time.Now(), // DonatePay –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞—Ç—É
	}

	if donation.User == "" {
		//–µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏, –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ (–Ω–∞–¥–µ—é—Å—å –Ω–µ—Ç)
		donation.User = fmt.Sprintf("donatepay-%d", msg.Notification.UserID)
	}

	//if donation.Currency == "" {
	//	donation.Currency = "RUB" // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º RUB
	//}

	// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	if decodedComment, err := decodeUnicode(vars.Comment); err == nil {
		donation.Message = decodedComment
	} else {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
	fmt.Printf("\nüéÅ –î–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ DONATEPAY:\n")
	fmt.Printf("üë§ –û—Ç: %s\n", donation.User)
	fmt.Printf("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: %s\n", donation.Message)
	fmt.Printf("üí∏ –°—É–º–º–∞: %.2f\n", donation.Amount /*, donation.Currency*/)
	fmt.Printf("üìÖ –î–∞—Ç–∞: %s\n", donation.Date.Format("2006-01-02 15:04:05"))
	fmt.Printf("üïí –í—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ): %s\n", donation.Timestamp.Format("15:04:05"))
	fmt.Printf("----------------------------------------\n")

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª
	select {
	case h.ch <- donation:
	case <-h.ctx.Done():
		return
	}
}

func (dc *DonatePayCollector) GetCollectorType() string {
	return "DonatePay"
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
func (dc *DonatePayCollector) Start(ctx context.Context) error {
	dc.stop = make(chan struct{})
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case <-dc.stop:
			return nil
		default:
			dc.setGUIState(Connecting)
			log.Println("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DonatePay...")
			token, err := dc.getConnectionToken()
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
				log.Printf("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ %v...", dc.reconnectDelay)
				time.Sleep(dc.reconnectDelay)
				continue
			}

			log.Println("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DonatePay Centrifugo...")
			config := centrifuge.DefaultConfig()
			config.Name = "go"
			client := centrifuge.NewJsonClient("wss://centrifugo.donatepay.ru/connection/websocket", config)
			client.SetToken(token)
			dc.client = client

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Centrifugo
			handler := ConnetionEventHandler{dc}
			client.OnConnect(handler)
			client.OnError(handler)
			client.OnDisconnect(handler)

			// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª widgets:LastEvents#<userID>
			channel := fmt.Sprintf("widgets:LastEvents#%s", dc.userID)
			sub, err := client.NewSubscription(channel)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª %s: %v", channel, err)
				client.Close()
				time.Sleep(dc.reconnectDelay)
				continue
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
			sub.OnSubscribeSuccess(handler)
			sub.OnSubscribeError(handler)
			sub.OnUnsubscribe(handler)

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–æ–Ω–∞—Ç–∞—Ö
			sub.OnPublish(PublishHandler{ctx: ctx, ch: dc.eventChan})

			// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞
			if err := client.Connect(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Centrifugo: %v", err)
				client.Close()
				time.Sleep(dc.reconnectDelay)
				continue
			}
			if err := sub.Subscribe(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª %s: %v", channel, err)
				client.Close()
				time.Sleep(dc.reconnectDelay)
				continue
			}

			// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
			select {
			case <-ctx.Done():
				client.Close()
				return ctx.Err()
			case <-dc.stop:
				client.Close()
				return nil
			}
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
func (dc *DonatePayCollector) Stop() error {
	close(dc.stop)
	dc.setGUIState(Disonnected)
	if dc.client != nil {
		dc.client.Close()
	}
	return nil
}

// getConnectionToken –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Centrifugo
func (dc *DonatePayCollector) getConnectionToken() (string, error) {
	url := fmt.Sprintf("%s/socket/token", api_donatepay_uri)
	payload, _ := json.Marshal(map[string]string{"access_token": dc.accessToken})
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(payload))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}
	defer resp.Body.Close()

	var result struct {
		Token string `json:"token"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	if result.Token == "" {
		return "", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω")
	}
	return result.Token, nil
}

// decodeUnicode –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç Unicode-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
func decodeUnicode(s string) (string, error) {
	var result strings.Builder
	var tempRune rune
	var err error
	for i := 0; i < len(s); {
		if i+1 < len(s) && s[i] == '\\' && s[i+1] == 'u' {
			if i+5 < len(s) {
				var code uint32
				_, err = fmt.Sscanf(s[i+2:i+6], "%04x", &code)
				if err != nil {
					return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode: %v", err)
				}
				tempRune = rune(code)
				result.WriteRune(tempRune)
				i += 6
			} else {
				return "", fmt.Errorf("–Ω–µ–ø–æ–ª–Ω–∞—è Unicode-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
			}
		} else {
			tempRune, _, err = readRune(s, i)
			if err != nil {
				return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä—É–Ω—ã: %v", err)
			}
			result.WriteRune(tempRune)
			i += runeLen(tempRune)
		}
	}
	return result.String(), nil
}

// readRune —á–∏—Ç–∞–µ—Ç –æ–¥–Ω—É —Ä—É–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
func readRune(s string, i int) (rune, int, error) {
	if i >= len(s) {
		return 0, 0, fmt.Errorf("–∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
	}
	for _, r := range s[i:] {
		return r, len(string(r)), nil
	}
	return 0, 0, fmt.Errorf("–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
}

// runeLen –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Ä—É–Ω—ã –≤ –±–∞–π—Ç–∞—Ö
func runeLen(r rune) int {
	return len(string(r))
}
