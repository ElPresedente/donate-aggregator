package sources

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/r3labs/sse/v2"
)

var api_donatty_uri string = "http://api-013.donatty.com"

var zone_offset int32 = -180

var ping_interval time.Duration = 50 * time.Second

// DonattyCollector —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è Donatty

type token struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpireAt     string `json:"expireAt"`
}

type DonattyCollector struct {
	mainToken      string
	token          token
	ref            string
	reconnectDelay time.Duration
	client         *http.Client
	stop           chan struct{}
}

// NewDonattyCollector —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è Donatty
func NewDonattyCollector(token_str, ref string) *DonattyCollector {
	return &DonattyCollector{
		mainToken:      token_str,
		token:          token{},
		ref:            ref,
		reconnectDelay: 5 * time.Second,
		//pingInterval:   30 * time.Second,
		client: &http.Client{
			Timeout: 10 * time.Second,
		},
		stop: make(chan struct{}),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
func (dc *DonattyCollector) Start(ctx context.Context, ch chan<- DonationEvent) error {
	dc.getAccessToken()

	//ping —Å–µ–∫—Ü–∏—è
	go func() {
		lastPing := time.Now()
		for {
			select {
			case <-dc.stop:
				return
			default:
				if time.Since(lastPing) > ping_interval {
					req, err := http.NewRequest("POST", fmt.Sprintf("https://api.donatty.com/widgets/%s/ping", dc.ref), nil)
					if err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PONG-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
						continue
					}
					req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", dc.token.AccessToken))
					resp, err := dc.client.Do(req)
					if err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PONG: %v", err)
					} else {
						log.Println("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG Donatty")
						resp.Body.Close()
					}
					lastPing = time.Now()
				} else {
					time.Sleep(ping_interval)
				}
			}
		}
	}()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case <-dc.stop:
			return nil
		default:
			//check is token expired
			//if expired - getAccessToken()
			sseUrl := fmt.Sprintf("%s/widgets/%s/sse?zoneOffset=%d&jwt=%s", api_donatty_uri, dc.ref, zone_offset, dc.token.AccessToken)
			sseClient := sse.NewClient(sseUrl)

			err := sseClient.SubscribeRaw(func(msg *sse.Event) {
				var outer struct {
					Action string          `json:"action"`
					Data   json.RawMessage `json:"data"`
				}
				if err := json.Unmarshal(msg.Data, &outer); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è: %v", err)
					return
				}

				if outer.Action != "DATA" {
					//–≤–æ–∑–º–æ–∂–Ω–æ –≥–¥–µ —Ç–æ —Ç—É—Ç –Ω–∞–¥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏—à–µ–ª –ª–∏ –ø–∏–Ω–≥ –∏–ª–∏ –Ω–µ—Ç, –∏ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
					return
				}

				//log.Printf("!!!! SSE EVENT %s, %s, %t", outer.Action, outer.Data, outer.Action != "DATA")

				var wrapper struct {
					StreamEventType string  `json:"streamEventType"`
					StreamEventData string  `json:"streamEventData"`
					Subscriber      string  `json:"subscriber"`
					Message         string  `json:"message"`
					Amount          float64 `json:"amount"`
					Currency        string  `json:"currency"`
				}
				if err := json.Unmarshal(outer.Data, &wrapper); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ wrapper: %v", err)
					return
				}

				var streamData struct {
					DisplayName string  `json:"displayName"`
					Amount      float64 `json:"amount"`
					Currency    string  `json:"currency"`
					Message     string  `json:"message"`
					Date        string  `json:"date"`
				}
				if wrapper.StreamEventData != "" {
					if err := json.Unmarshal([]byte(wrapper.StreamEventData), &streamData); err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ streamEventData: %v", err)
						return
					}
				}

				donation := DonationEvent{
					SourceID: "donatty",
					User:     streamData.DisplayName,
					Amount:   wrapper.Amount,
					//Currency:   wrapper.Currency,
					Message:   wrapper.Message,
					Timestamp: time.Now(),
				}

				if donation.Amount == 0 {
					donation.Amount = streamData.Amount
				}
				// if donation.Currency == "" {
				// 	donation.Currency = streamData.Currency
				// }
				if donation.Message == "" {
					donation.Message = streamData.Message
				}
				if streamData.Date != "" {
					date, err := time.Parse(time.RFC3339, streamData.Date)
					if err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: %v", err)
					} else {
						donation.Date = date
					}
				}
				fmt.Printf("\nüéÅ –î–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ DONATTY:\n")
				fmt.Printf("üë§ –û—Ç: %s\n", donation.User)
				fmt.Printf("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: %s\n", donation.Message)
				fmt.Printf("üí∏ –°—É–º–º–∞: %.2f\n", donation.Amount /*, donation.Currency*/)
				fmt.Printf("üìÖ –î–∞—Ç–∞: %s\n", donation.Date.Format("2006-01-02 15:04:05"))
				fmt.Printf("üïí –í—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ): %s\n", donation.Timestamp.Format("15:04:05"))
				fmt.Printf("----------------------------------------\n")

				// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª
				select {
				case ch <- donation:
				case <-ctx.Done():
					return
				}
			})
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Donatty: %v", err)
				log.Printf("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ %v...", dc.reconnectDelay)
				time.Sleep(dc.reconnectDelay)
			}
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
func (dc *DonattyCollector) Stop() error {
	close(dc.stop)
	return nil
}

// getAccessToken –ø–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è Donatty
func (dc *DonattyCollector) getAccessToken() error {
	url := fmt.Sprintf("%s/auth/tokens/%s", api_donatty_uri, dc.mainToken)
	resp, err := dc.client.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	var result struct {
		Response struct {
			AccessToken  string `json:"accessToken"`
			RefreshToken string `json:"refreshToken"`
			ExpireAt     string `json:"expireAt"`
		} `json:"response"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		log.Fatal("DONATTY TOKEN ERROR")
		return err
	}
	dc.token.AccessToken = result.Response.AccessToken
	dc.token.RefreshToken = result.Response.RefreshToken
	dc.token.ExpireAt = result.Response.ExpireAt
	return nil
}
