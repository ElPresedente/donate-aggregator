package main

import (
	"context"
	"encoding/json"
	"fmt"
	"go-back/database"
	//"go-back/logic"
	"go-back/sources"
	"log"
	"os"
	"sync"

	"github.com/joho/godotenv"
	"github.com/wailsapp/wails/v2/pkg/runtime"

	"net/http"

	"github.com/gorilla/websocket"
)

//–Ø–†–ß–ï: –ú—É–∂–∏–∫–∏, —Å–æ—Ä–∏, –Ω–µ –µ–±—É –∫—É–¥–∞ —ç—Ç–æ –ø–∏—Ö–Ω—É—Ç—å, —Å–∞–º–∏ —Ä–∞–∑–±–µ—Ä—ë—Ç–µ—Å—å---------------------------------------------------------------------------------------------------------------

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

type Message struct {
	Type    string `json:"type"`
	Payload string `json:"payload"`
}

// –û–±—ä–µ–∫—Ç –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ WebSocket
func (a *App) StartWebSocketServer() {
	upgrader := websocket.Upgrader{
		CheckOrigin: func(r *http.Request) bool {
			return true
		},
	}

	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		conn, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
			return
		}
		a.clientsMu.Lock()
		a.clients[conn] = true
		a.clientsMu.Unlock()

		defer func() {
			a.clientsMu.Lock()
			delete(a.clients, conn)
			a.clientsMu.Unlock()
			conn.Close()
		}()

		for {
			if _, _, err := conn.ReadMessage(); err != nil {
				break
			}
		}
	})

	go http.ListenAndServe(":8080", nil)
}

func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	// –ê–ø–≥—Ä–µ–π–¥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
		return
	}
	defer conn.Close()

	fmt.Println("–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket")

	for {
		// –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
		messageType, message, err := conn.ReadMessage()
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
			break
		}

		fmt.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s\n", message)

		// –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
		err = conn.WriteMessage(messageType, []byte("–ü—Ä–∏–Ω—è—Ç–æ: "+string(message)))
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", err)
			break
		}
	}
}

func (a *App) SendMessageFromFrontend(msg string) {

	a.clientsMu.Lock()
	defer a.clientsMu.Unlock()

	payload := Message{
		Type:    "chat",
		Payload: msg,
	}
	data, _ := json.Marshal(payload)

	for conn := range a.clients {
		err := conn.WriteMessage(websocket.TextMessage, data)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err)
			conn.Close()
			delete(a.clients, conn)
		}
	}
}

//–Ø–†–ß–ï: –ú—É–∂–∏–∫–∏, —Å–æ—Ä–∏, –Ω–µ –µ–±—É –∫—É–¥–∞ —ç—Ç–æ –ø–∏—Ö–Ω—É—Ç—å, —Å–∞–º–∏ —Ä–∞–∑–±–µ—Ä—ë—Ç–µ—Å—å---------------------------------------------------------------------------------------------------------------

// App struct
type App struct {
	ctx context.Context
	//–Ø–†–ß–ï: –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
	clients   map[*websocket.Conn]bool
	clientsMu sync.Mutex
	//–Ø–†–ß–ï: –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
}

// NewApp creates a new App application struct
func NewApp() *App {
	//–Ø–†–ß–ï: –ù–ï –ï–ë–£ –ß–û –≠–¢–û –î–ï–õ–ê–ï–¢, –ù–û –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
	return &App{
		clients: make(map[*websocket.Conn]bool),
	}
	//–Ø–†–ß–ï: –ù–ï –ï–ë–£ –ß–û –≠–¢–û –î–ï–õ–ê–ï–¢, –ù–û –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx

	a.StartWebSocketServer()

	err := godotenv.Load()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %s", err)
	}

	// –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏–π
	eventCh := make(chan sources.DonationEvent, 100)

	// –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	collectors := []sources.EventCollector{
		sources.NewDonattyCollector(os.Getenv("DONATTY_TOKEN"), os.Getenv("DONATTY_REF"), eventCh),
		sources.NewDonatePayCollector(os.Getenv("DONATPAY_TOKEN"), os.Getenv("DONATPAY_USERID"), eventCh),
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
	for _, collector := range collectors {
		go func(c sources.EventCollector) {
			if err := c.Start(ctx); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: %v", err)
			}
		}(collector)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	go func() {
		for {
			select {
			case <-ctx.Done():
				// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
				for _, collector := range collectors {
					if err := collector.Stop(); err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: %v", err)
					}
				}
				return
			case donation := <-eventCh:
				// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ GUI) -------------------

				//–ü–û –°–£–¢–ò –í–û–¢ –¢–£–¢ –ú–´ –ë–£–î–ï–ú –Æ–ó–ê–¢–¨ FrontendDispatcher
				runtime.EventsEmit(a.ctx, "donation", donation)
			}
		}
	}()
}

// Greet returns a greeting for the given name
func (a *App) Greet(name string) string {
	return fmt.Sprintf("Hello %s, It's show time!", name)
}

func (a *App) FrontendDispatcher(endpoint string, argJSON string)  {
	log.Printf("üõ∞ –í—ã–∑–æ–≤ FrontendDispatcher: %s, argJSON: %s", endpoint, argJSON)
	
	switch endpoint {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ ID –≥—Ä—É–ø–ø—ã
	case "getItemsByGroupId":
		var payload struct {
			GroupID int `json:"group_id"`
		}
		if err := json.Unmarshal([]byte(argJSON), &payload); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
			return
		}
		items, err := database.RouletteDB.GetItemsByGroupID(payload.GroupID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
			return
		}

		var formattedItems []map[string]interface{}
		for _, item := range items {
			formattedItems = append(formattedItems, map[string] interface{}{
				"id": 		item.ID,
				"data": 	item.Name,
				"status": 	nil,
			})
		}
		runtime.EventsEmit(a.ctx, "itemsByGroupIdData", formattedItems)
	case "itemsToSave":
 		var payload struct {
  			GroupID int `json:"id"` //–ï—Å–ª–∏ –ø–æ—Ç–æ–º –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–Ω–µ–π–º –≤ –≥—Ä—É–øID, —Ç–æ —Ç—É—Ç —Ç–æ–∂–µ –ø–æ–º–µ–Ω—è—Ç—å
  			Items   []struct {
   				ID     	int     `json:"id"`
   				Data   	string  `json:"data"`
   				Status 	*string `json:"status"` // –º–æ–∂–µ—Ç –±—ã—Ç—å null
  			} `json:"items"`
 		}

 		if err := json.Unmarshal([]byte(argJSON), &payload); err != nil {
  			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON itemsToSave:", err)
  			return
 		}

		log.Println(payload)

 		for _, item := range payload.Items {
  			switch {
  				case item.Status == nil:
   					continue

  				case *item.Status == "add":
   					err := database.RouletteDB.AddItem(payload.GroupID, item.Data)
   					if err != nil {
    					log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %v", err)
   					}

  				case *item.Status == "edit":
   					err := database.RouletteDB.UpdateItem(item.ID, item.Data)
   					if err != nil {
    					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
   					}

  				case *item.Status == "delete":
   					err := database.RouletteDB.DeleteItem(item.ID)
   					if err != nil {
    					log.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
   					}

  				default:
   					log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '%v' –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ID %d", *item.Status, item.ID)
  			}
 		}

		items, err := database.RouletteDB.GetItemsByGroupID(payload.GroupID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
			return
		}

		var formattedItems []map[string]interface{}
		for _, item := range items {
			formattedItems = append(formattedItems, map[string] interface{}{
				"id": 		item.ID,
				"data": 	item.Name,
				"status": 	nil,
			})
		}
		runtime.EventsEmit(a.ctx, "itemsByGroupIdData", formattedItems)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏ –∏—Ö –∏—Ç–µ–º–æ–≤
	case "getGroups":
		groups, err := database.RouletteDB.GetRouletteGroups()
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
			return
		}
		result := make([]map[string]interface{}, 0)

		for _, group := range groups {
			items, err := database.RouletteDB.GetItemsByGroupID(group.ID)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã %d: %s", group.ID, err)
				continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			}

			itemNames := make([]string, 0, len(items))
			for _, item := range items {
				itemNames = append(itemNames, item.Name)
			}

			groupData := map[string]interface{}{
				"title":      group.Name,
				"items":      itemNames,
				"percentage": group.Percentage,
				"color":      group.Color, 
			}
			result = append(result, groupData)
		}
	log.Println("‚úÖ –ì—Ä—É–ø–ø—ã:", result)
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç
	runtime.EventsEmit(a.ctx, "groupsData", result)

	case "newLog":
		//–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
		//–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –±–¥
		//–ö–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ 10 –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ –≤ –±–¥

		/*
		–î–æ–ø—É—Å—Ç–∏–º –∫ –Ω–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –º–∞—Å—Å–∏–≤ [...] –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∞
		{
			time: –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏ DD.MM HH.MM
			user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å —Ä—É–ª–µ—Ç–∫–∞
			data: —Å–µ–∫—Ç–æ—Ä, –≤—ã–ø–∞–≤—à–∏–π –Ω–∞ —Ä—É–ª–µ—Ç–∫–µ
		}
		*/
		result := make([]map[string]interface{}, 0)
		// groupData := map[string]interface{}{
		// 		"time":      "–≤—Ä–µ–º—è",
		// 		"user":      "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		// 		"data": 	 "–Ω–∞–≥—Ä–∞–¥–∞",
		// 	}
		// result = append(result, groupData)
		// logData := map[string]interface{}{
		// 	"title":      group.Name,
		// 	"items":      itemNames,
		// 	"percentage": group.Percentage,
		// 	"color":      group.Color, 
		// }
		
		runtime.EventsEmit(a.ctx, "logUpdated", result)
	
	case "updateSettings":
    var payload struct {
        Settings []struct {
            Name  string `json:"name"`
            Value string `json:"value"`
        } `json:"settings"`
    }

    if err := json.Unmarshal([]byte(argJSON), &payload); err != nil {
        log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON updateSettings:", err)
        return
    }

    for _, setting := range payload.Settings {
        exists, err := database.CredentialsDB.CheckENVExists(setting.Name)
        if err != nil {
            log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s': %v", setting.Name, err)
            continue
        }

        if exists {
            err = database.CredentialsDB.UpdateENVValue(setting.Name, setting.Value)
            if err != nil {
                log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s': %v", setting.Name, err)
            }
        } else {
            database.CredentialsDB.InsertENVValue(setting.Name, setting.Value)
        }
    }
		/*–ª–æ–≥–∏–∫–∞:
		–ó–∞—Ä–∞–Ω–µ–µ –º—ã –∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ —É –Ω–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		–ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ–π–≤
		[
			{
				name:	–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏,
				value:	–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏,
			},
			...
			]
			–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–¥
				–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
					–¥–µ–ª–∞–µ–º –∞–ø–¥–µ–π—Ç –Ω–∞ –Ω–æ–≤—ã–µ
				–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
					–¥–µ–ª–∞–µ–º –∏–Ω—Å–µ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			
			–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ

		*/

	default:
		log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint: %s", endpoint)
	}
}
