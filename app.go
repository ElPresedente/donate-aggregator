package main

import (
	"context"
	"encoding/json"
	"fmt"
	"go-back/database"
	"go-back/logic"
	"go-back/sources"
	"log"
	"os"
	"sync"

	"github.com/joho/godotenv"
	"github.com/wailsapp/wails/v2/pkg/runtime"

	"net/http"

	"github.com/gorilla/websocket"
)

//–Ø–†–ß–ï: –ú—É–∂–∏–∫–∏, —Å–æ—Ä–∏, –Ω–µ –µ–±—É –∫—É–¥–∞ —ç—Ç–æ –ø–∏—Ö–Ω—É—Ç—å, —Å–∞–º–∏ —Ä–∞–∑–±–µ—Ä—ë—Ç–µ—Å—å---------------------------------------------------------------------------------------------------------------

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

type Message struct {
	Type    string `json:"type"`
	Payload string `json:"payload"`
}

// –û–±—ä–µ–∫—Ç –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ WebSocket
func (a *App) StartWebSocketServer() {
	upgrader := websocket.Upgrader{
		CheckOrigin: func(r *http.Request) bool {
			return true
		},
	}

	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		conn, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
			return
		}
		a.clientsMu.Lock()
		a.clients[conn] = true
		a.clientsMu.Unlock()

		defer func() {
			a.clientsMu.Lock()
			delete(a.clients, conn)
			a.clientsMu.Unlock()
			conn.Close()
		}()

		for {
			if _, _, err := conn.ReadMessage(); err != nil {
				break
			}
		}
	})

	go http.ListenAndServe(":8080", nil)
}

func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	// –ê–ø–≥—Ä–µ–π–¥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
		return
	}
	defer conn.Close()

	fmt.Println("–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket")

	for {
		// –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
		messageType, message, err := conn.ReadMessage()
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
			break
		}

		fmt.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s\n", message)

		// –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
		err = conn.WriteMessage(messageType, []byte("–ü—Ä–∏–Ω—è—Ç–æ: "+string(message)))
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", err)
			break
		}
	}
}

func (a *App) SendMessageFromFrontend(msg string) {

	a.clientsMu.Lock()
	defer a.clientsMu.Unlock()

	payload := Message{
		Type:    "chat",
		Payload: msg,
	}
	data, _ := json.Marshal(payload)

	for conn := range a.clients {
		err := conn.WriteMessage(websocket.TextMessage, data)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err)
			conn.Close()
			delete(a.clients, conn)
		}
	}
}

//–Ø–†–ß–ï: –ú—É–∂–∏–∫–∏, —Å–æ—Ä–∏, –Ω–µ –µ–±—É –∫—É–¥–∞ —ç—Ç–æ –ø–∏—Ö–Ω—É—Ç—å, —Å–∞–º–∏ —Ä–∞–∑–±–µ—Ä—ë—Ç–µ—Å—å---------------------------------------------------------------------------------------------------------------

// App struct
type App struct {
	ctx context.Context
	//–Ø–†–ß–ï: –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
	clients   map[*websocket.Conn]bool
	clientsMu sync.Mutex
	//–Ø–†–ß–ï: –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
}

// NewApp creates a new App application struct
func NewApp() *App {
	//–Ø–†–ß–ï: –ù–ï –ï–ë–£ –ß–û –≠–¢–û –î–ï–õ–ê–ï–¢, –ù–û –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
	return &App{
		clients: make(map[*websocket.Conn]bool),
	}
	//–Ø–†–ß–ï: –ù–ï –ï–ë–£ –ß–û –≠–¢–û –î–ï–õ–ê–ï–¢, –ù–û –≠–¢–û –¢–û–ñ–ï –ú–û–Å---------------------------------------------------------------------------------------------------------------
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx

	a.StartWebSocketServer()

	err := godotenv.Load()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %s", err)
	}

	// –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏–π
	eventCh := make(chan sources.DonationEvent, 100)

	// –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	collectors := []sources.EventCollector{
		sources.NewDonattyCollector(os.Getenv("DONATTY_TOKEN"), os.Getenv("DONATTY_REF"), eventCh),
		sources.NewDonatePayCollector(os.Getenv("DONATPAY_TOKEN"), os.Getenv("DONATPAY_USERID"), eventCh),
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
	for _, collector := range collectors {
		go func(c sources.EventCollector) {
			if err := c.Start(ctx); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: %v", err)
			}
		}(collector)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	go func() {
		for {
			select {
			case <-ctx.Done():
				// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
				for _, collector := range collectors {
					if err := collector.Stop(); err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: %v", err)
					}
				}
				return
			case donation := <-eventCh:
				// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ GUI) -------------------

				//–ü–û –°–£–¢–ò –í–û–¢ –¢–£–¢ –ú–´ –ë–£–î–ï–ú –Æ–ó–ê–¢–¨ FrontendDispatcher
				runtime.EventsEmit(a.ctx, "donation", donation)
			}
		}
	}()
}

// Greet returns a greeting for the given name
func (a *App) Greet(name string) string {
	return fmt.Sprintf("Hello %s, It's show time!", name)
}

func (a *App) FrontendDispatcher(endpoint string, arg any)  {
	log.Printf("üõ∞ –í—ã–∑–æ–≤ FrontendDispatcher: %s, arg: %#v", endpoint, arg)

	args, ok := arg.([]interface{})
	if !ok {
		log.Println("‚ùå –û—à–∏–±–∫–∞: –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º")
		return
	}
	
	switch endpoint {
	case "test":
		logic.NotifyDBChange(a.ctx, []string{"–ø–æ–ø–∞", "–∂–æ–ø–∞", "–ø–æ–ø–∞"})
	
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ ID –≥—Ä—É–ø–ø—ã
	case "getItemsByGroup":
		if len(args) < 1 {
			log.Println("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω group_id")
			return
		}
		groupID, ok := args[0].(float64) // Wails –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ float64
		if !ok {
			log.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø group_id")
			return
		}
		items, err := database.RouletteDB.GetItemsByGroupID(int(groupID))
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
			return
		}
		runtime.EventsEmit(a.ctx, "groupItems", items)

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
	case "addItemToGroup":
		if len(args) < 2 {
			log.Println("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞")
			return
		}
		groupID, ok1 := args[0].(float64)
		itemName, ok2 := args[1].(string)
		if !ok1 || !ok2 {
			log.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
			return
		}
		err := database.RouletteDB.AddItemToGroup(int(groupID), itemName)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:", err)
			return
		}
		runtime.EventsEmit(a.ctx, "itemAdded", map[string]interface{}{
			"group_id": groupID,
			"name":     itemName,
		})
	case "getGroupById":
		log.Printf("üì¶ args[0] = %#v (%T)\n", args[0], args[0])
		if len(args) < 1 {
			log.Println("‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω id –≥—Ä—É–ø–ø—ã")
			return
		}

		groupID, ok := args[0].(float64) // –ø–æ—Ç–æ–º—É —á—Ç–æ JSON —á–∏—Å–ª–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ float64
		if !ok {
			log.Println("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø ID")
			return
		}

		groupData, err := database.RouletteDB.GetGroupWithItemsByID(int(groupID))
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: %s", err)
			return
		}

		jsonData, err := json.Marshal(groupData)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ JSON: %s", err)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Å–æ–±—ã—Ç–∏—é)
		//
		// runtime.EventsEmit(a.ctx, "groupData", string(jsonData))db_updted
		runtime.EventsEmit(a.ctx, "db_updated", string(jsonData))
	}
}
