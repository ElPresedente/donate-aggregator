name: Build and Deploy Donate Aggregator

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - dev
      - master
permissions:
  contents: write # Grant write access for creating releases
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Проверяем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Устанавливаем Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Укажи версию Go, используемую в проекте

      # Кэшируем Go модули
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}

      # Устанавливаем Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Укажи версию Node.js, подходящую для проекта

      # Кэшируем npm зависимости
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # Устанавливаем зависимости фронтенда
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Install rollup-linux-x64-gnu (cause of npm bug)
        run: npm install @rollup/rollup-linux-x64-gnu
        working-directory: ./frontend

      # Устанавливаем Wails CLI
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Собираем фронтенд
      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
      
        # Сборка проекта
      - name: Build project
        run: wails build -platform windows/amd64

      # Сохраняем артефакты сборки
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: donate-aggregator
          path: build/bin/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get version from wails.json
        id: get_version
        run: echo "version=$(jq -r '.info.productVersion' wails.json)" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: donate-aggregator
          path: build/bin/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Fix upload_url
        id: fix_upload_url
        run: |
          clean_url=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed 's/{.*}//')
          echo "url=$clean_url" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.fix_upload_url.outputs.url }}
        run: |
          for file in build/bin/*; do
            echo "Uploading $file"
            curl \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${UPLOAD_URL}?name=$(basename $file)"
          done
