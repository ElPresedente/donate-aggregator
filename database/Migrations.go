package database

import (
	_ "embed"
	"log"
	"strings"
)

//go:embed version.txt
var embeddedVersion string

func GetCurrentAppSchemaVersion() string {
	return strings.TrimSpace(embeddedVersion)
}

func Migrate(fromVersion, toVersion string) {
	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ—Ä—Å–∏–∏ %s –Ω–∞ %s", fromVersion, toVersion)

	if fromVersion == "0.0.7" && toVersion == "0.0.8" {
		migrateFrom007To008()
	}
	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

func migrateFrom007To008() {
	log.Println("üöß –ú–∏–≥—Ä–∞—Ü–∏—è: 0.0.7 ‚Üí 0.0.8")

	var keysToMigrate = []string{
		"rollPrice",
		"rollPriceIncrease",
	}

	values := make(map[string]string)

	for _, key := range keysToMigrate {
		val, err := CredentialsDB.GetENVValue(key)
		if err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å %s –∏–∑ CredentialsDB: %v", key, err)
			continue
		}
		values[key] = val
	}
	// –ü—Ä–∏–º–µ—Ä –≤—Å—Ç–∞–≤–∫–∏
	/*
		for key, val := range values {
			err := RouletteDB.InsertENVValue(key, val)
			if err != nil {
				log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å %s –≤ RouletteDB: %v", key, err)
				continue
			}
			log.Printf("‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ %s –≤ RouletteDB", key)
		}
	*/

	for _, key := range keysToMigrate {
		_, err := CredentialsDB.db.Exec("DELETE FROM EnvVariables WHERE name = ?", key)
		if err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å %s –∏–∑ CredentialsDB: %v", key, err)
			continue
		}
		log.Printf("üßπ –£–¥–∞–ª–µ–Ω–æ %s –∏–∑ CredentialsDB", key)
	}

	log.Println("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è rollPrice –∏ rollPriceIncrease —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ RouletteDB.")
}
