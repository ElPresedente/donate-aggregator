package main

import (
	"encoding/json"
	"go-back/database"
	"log"

	"github.com/wailsapp/wails/v2/pkg/runtime"
)

func (a *App) FrontendDispatcher(endpoint string, argJSON string) {
	log.Printf("üõ∞ –í—ã–∑–æ–≤ FrontendDispatcher: %s, argJSON: %s", endpoint, argJSON)

	switch endpoint {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ ID –≥—Ä—É–ø–ø—ã
	case "getItemsByGroupId":
		{ //to logic class
			var payload struct {
				GroupID int `json:"group_id"`
			}
			if err := json.Unmarshal([]byte(argJSON), &payload); err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
				return
			}
			items, err := database.RouletteDB.GetItemsByGroupID(payload.GroupID)
			if err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
				return
			}

			var formattedItems []map[string]interface{}
			for _, item := range items {
				formattedItems = append(formattedItems, map[string]interface{}{
					"id":     item.ID,
					"data":   item.Name,
					"status": nil,
				})
			}
			runtime.EventsEmit(a.ctx, "itemsByGroupIdData", formattedItems)
		}
	case "itemsToSave":
		{ //to logic class
			var payload struct {
				GroupID int `json:"id"` //–ï—Å–ª–∏ –ø–æ—Ç–æ–º –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–Ω–µ–π–º –≤ –≥—Ä—É–øID, —Ç–æ —Ç—É—Ç —Ç–æ–∂–µ –ø–æ–º–µ–Ω—è—Ç—å
				Items   []struct {
					ID     int     `json:"id"`
					Data   string  `json:"data"`
					Status *string `json:"status"` // –º–æ–∂–µ—Ç –±—ã—Ç—å null
				} `json:"items"`
			}

			if err := json.Unmarshal([]byte(argJSON), &payload); err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON itemsToSave:", err)
				return
			}
			log.Println(payload)

			for _, item := range payload.Items {
				switch {
				case item.Status == nil:
					continue

				case *item.Status == "add":
					err := database.RouletteDB.AddItem(payload.GroupID, item.Data)
					if err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %v", err)
					}

				case *item.Status == "edit":
					err := database.RouletteDB.UpdateItem(item.ID, item.Data)
					if err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
					}

				case *item.Status == "delete":
					err := database.RouletteDB.DeleteItem(item.ID)
					if err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
					}

				default:
					log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '%v' –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ID %d", *item.Status, item.ID)
				}
			}

			items, err := database.RouletteDB.GetItemsByGroupID(payload.GroupID)
			if err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
				return
			}

			var formattedItems []map[string]interface{}
			for _, item := range items {
				formattedItems = append(formattedItems, map[string]interface{}{
					"id":     item.ID,
					"data":   item.Name,
					"status": nil,
				})
			}
			runtime.EventsEmit(a.ctx, "itemsByGroupIdData", formattedItems)
		}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏ –∏—Ö –∏—Ç–µ–º–æ–≤
	case "getGroups":
		groups, err := database.RouletteDB.GetRouletteGroups()
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err)
			return
		}
		result := make([]map[string]interface{}, 0)

		for _, group := range groups {
			items, err := database.RouletteDB.GetItemsByGroupID(group.ID)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã %d: %s", group.ID, err)
				continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			}

			itemNames := make([]string, 0, len(items))
			for _, item := range items {
				itemNames = append(itemNames, item.Name)
			}

			groupData := map[string]interface{}{
				"title":      group.Name,
				"items":      itemNames,
				"percentage": group.Percentage,
				"color":      group.Color,
			}
			result = append(result, groupData)
			log.Println("‚úÖ –ì—Ä—É–ø–ø—ã:", result)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç
			runtime.EventsEmit(a.ctx, "groupsData", result)
		}

	case "getSettings":
		settings, err := database.CredentialsDB.GetAllENVValues()
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", err)
			return
		}
		result := make([]map[string]interface{}, 0)

		for _, setting := range settings {
			settingsData := map[string]interface{}{
				"name":  setting.Name,
				"value": setting.Value,
			}
			result = append(result, settingsData)
		}
		runtime.EventsEmit(a.ctx, "SettingsData", result)

	case "updateSettings":
		var payload struct {
			Settings []struct {
				Name  string `json:"name"`
				Value string `json:"value"`
			} `json:"settings"`
		}

		if err := json.Unmarshal([]byte(argJSON), &payload); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON updateSettings:", err)
			return
		}
		log.Println("–´:", payload)
		for _, setting := range payload.Settings {
			exists, err := database.CredentialsDB.CheckENVExists(setting.Name)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s': %v", setting.Name, err)
				continue
			}

			if exists {
				err = database.CredentialsDB.UpdateENVValue(setting.Name, setting.Value)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s': %v", setting.Name, err)
				}
			} else {
				database.CredentialsDB.InsertENVValue(setting.Name, setting.Value)
			}
		}

	default:
		log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint: %s", endpoint)
	}
}
